@page "/Videos"
@layout VideoAnalyzer.Client.Themes.PTI.PTIDefaultLayout
@using VideoAnalyzer.Shared.Models.AzureVideoIndexer.ListVideos
@using PTI.BlazorComponents.SocialNetworks.Twitter
@using PTI.BlazorComponents.SocialNetworks.LinkedIn
@using VideoAnalyzer.Client.CustomComponents
@inject HttpClient httpClient
@inject NavigationManager NavManager

<h1>Videos</h1>
<div class="row">
    <!--Linked Buttons does not seem to support sharing url when is set to localhost, for dev, you may want to change it-->
    <!--https://stackoverflow.com/questions/5861550/error-when-using-linkedins-share-button-->
    <LinkedInShareButton UrlToShare="@EncodedCurrentUrl"
                         AddPlatformScript="true"></LinkedInShareButton>
</div>
@if (IsLoading)
{
    <LoadingIndicator></LoadingIndicator>
}
else
{
    <div class="row">
        <TwitterShareButton AddWidgetsScript="true"
                            TweetText="Check these videos!"
                            UrlToShare="@EncodedCurrentUrl"
                            HashTags="Blazor,dotnet,dotnetcore"></TwitterShareButton>
    </div>
    <div class="row">
        @foreach (var videoInfo in this.VideosResponse.results)
        {
            <VideoCard  LinkUrl="@this.VideosPageUrls[videoInfo.id]"
                       ThumbnailSrc="@this.VideosThumbnails[videoInfo.id]"
                       VideoDescription="@videoInfo.description"
                       VideoName="@videoInfo.name">
            </VideoCard>
        }
    </div>
}

@code {

    private ListVideosResponse VideosResponse { get; set; }
    private Dictionary<string, string> VideosThumbnails { get; set; }
    private Dictionary<string, string> VideosPageUrls { get; set; }
    private bool IsLoading { get; set; } = false;

    private string EncodedCurrentUrl
    {
        get
        {
            return System.Web.HttpUtility.UrlPathEncode(NavManager.Uri);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        this.IsLoading = true;
        string location = await httpClient.GetStringAsync("VideoIndexer/GetLocation");
        this.VideosResponse = await httpClient.GetFromJsonAsync<ListVideosResponse>("VideoIndexer/ListVideos");
        this.VideosThumbnails = new Dictionary<string, string>();
        this.VideosPageUrls = new Dictionary<string, string>();
        foreach (var singleVideo in this.VideosResponse.results)
        {
            var thumbnailBase64 = await httpClient.GetStringAsync($"VideoIndexer/GetVideoThumbnail" +
                $"?videoId={singleVideo.id}&thumbnailId={singleVideo.thumbnailId}");
            var imgSrc = String.Format("data:image/gif;base64,{0}", thumbnailBase64);
            this.VideosThumbnails.Add(singleVideo.id, imgSrc);
            var videoAccesstoken = await httpClient.GetStringAsync($"VideoIndexer/GetVideoAccessToken" +
                $"?videoId={singleVideo.id}&allowEdit=true");
            string link = $"/Video/{singleVideo.accountId}/{singleVideo.id}/{location}/{videoAccesstoken}";
            this.VideosPageUrls.Add(singleVideo.id, link);
        };
        this.IsLoading = false;
    }
}
