@page "/Search"
@page "/Search/{keyword}"
@layout VideoAnalyzer.Client.Themes.PTI.PTIDefaultLayout
@using SV = VideoAnalyzer.Shared.Models.AzureVideoIndexer.SearchVideos
@using VideoAnalyzer.Client.CustomComponents
@inject HttpClient httpClient

<ul>
<li>
<div class="search"> 
    <form action="#">
                <input type="text"
                    placeholder="      | Search"
                    name="search"
                    @bind="@Keyword">
                <button @onclick="SearchVideos" type="button">
                    <i class="oi oi-magnifying-glass"
                        style="font-size: 18px;">
                    </i>
                </button>
   </form>
</div>
</li>
@if (IsLoading)
{
<LoadingIndicator></LoadingIndicator> }
            else
            {
@if (this.FoundVideos != null)
    {
        <li>
            <div class="row">

                @foreach (var videoInfo in this.FoundVideos.results)
                {
                    <ul >
                        <li>
                            <VideoCard  LinkUrl="@this.VideosPageUrls[videoInfo.id]"
           ThumbnailSrc="@this.VideosThumbnails[videoInfo.id]"
           VideoDescription="@videoInfo.description"
           VideoName="@videoInfo.name">
                            </VideoCard>
                        </li>
                        <li>
                            <div class="instance">
                                <a class="box">
                                    @this.Instances[videoInfo.id]
                                </a>
                            </div>
                        </li> 
                    </ul>
                }
</div>
</li>}

<li>
                <div class="row">
                    @Message
                </div>
            </li>}
                 </ul>
               


@code
{
    [CascadingParameter]
    private Themes.ThemeConfiguration CurrentTheme { get; set; }
    [Parameter]
    public string Keyword { get; set; }
    private string Message { get; set; }
    private SV.SearchVideosResponse FoundVideos { get; set; }
    public bool IsLoading { get; set; }
    private Dictionary<string, string> VideosThumbnails { get; set; } = new Dictionary<string, string>();
    private Dictionary<string, string> VideosPageUrls { get; set; } = new Dictionary<string, string>();
    private  Dictionary<string, string> Instances { get; set; }= new Dictionary<string, string>();
    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrWhiteSpace(this.Keyword))
        {
            await SearchVideos();
        }
    }

    private async Task SearchVideos()
    {
        //throw new NotImplementedException();
        this.IsLoading = true;
        string location = await httpClient.GetStringAsync("VideoIndexer/GetLocation");
        this.FoundVideos = await httpClient.GetFromJsonAsync<SV.SearchVideosResponse>($"VideoIndexer" +
        $"/SearchVideos?keyword={Keyword}");
        foreach (var singleVideo in this.FoundVideos.results)
        {
            var thumbnailBase64 = await httpClient.GetStringAsync($"VideoIndexer/GetVideoThumbnail" +
                $"?videoId={singleVideo.id}&thumbnailId={singleVideo.thumbnailId}");
            var imgSrc = String.Format("data:image/gif;base64,{0}", thumbnailBase64);
            this.VideosThumbnails.Add(singleVideo.id, imgSrc);
            var videoAccesstoken = await httpClient.GetStringAsync($"VideoIndexer/GetVideoAccessToken" +
                $"?videoId={singleVideo.id}&allowEdit=true");
            string link = $"/Video/{singleVideo.accountId}/{singleVideo.id}/{location}/{videoAccesstoken}";
            this.VideosPageUrls.Add(singleVideo.id, link);
            var timespanlist = await httpClient.GetStringAsync($"VideoIndexer/GetInstancesOfKeywordPerVideo" +
                $"?query={Keyword}&videoId={singleVideo.id}");

            if (timespanlist.ToString() != "")
            { this.Instances.Add(singleVideo.id, timespanlist.ToString()); }
            else
            {
                 this.Instances.Add(singleVideo.id,"No instances fetched. Click on the link to explore more."); 
            }
        };
        this.IsLoading = false;
        if (this.FoundVideos.results.Count == 0)
        {
            this.Message = "No data found";
        }
    } 
}